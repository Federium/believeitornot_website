---
// ImageGallery.astro
import { Image } from "astro:assets";
// Importa le tue immagini
import image1 from "../assets/image1.jpg";
import image2 from "../assets/image2.jpg";
import image3 from "../assets/image3.jpg";

const images = [
	{ src: image1, alt: "Immagine 1", id: "img1" },
	{ src: image2, alt: "Immagine 2", id: "img2" },
	{ src: image3, alt: "Immagine 3", id: "img3" },
];
---

<div class="gallery-container" id="gallery-container">
	{
		images.map(img => (
			<div class="image-wrapper draggable" data-image-id={img.id}>
				<Image
					src={img.src}
					alt={img.alt}
					width={200}
					height={150}
					class="gallery-image"
				/>
			</div>
		))
	}
</div>

<style>
	.gallery-container {
		position: absolute;
		width: 100vw;
		height: 100vh;
		overflow: hidden;
		z-index: 2;
	}

	.image-wrapper {
		position: absolute;
		cursor: grab;
	}

	.image-wrapper:active {
		cursor: grabbing;
	}

	.gallery-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
</style>

<script>
	import { animate, createDraggable, createSpring, stagger } from "animejs";

	// Funzione per posizionare le immagini casualmente al centro
	function randomizePositions(centerFactor = 0.6) {
		const container = document.getElementById("gallery-container");
		const imageWrappers = container.querySelectorAll(".image-wrapper");

		imageWrappers.forEach(wrapper => {
			const containerWidth = container.offsetWidth;
			const containerHeight = container.offsetHeight;
			const wrapperWidth = wrapper.offsetWidth;
			const wrapperHeight = wrapper.offsetHeight;

			// Area centrale
			const centerAreaWidth = containerWidth * centerFactor;
			const centerAreaHeight = containerHeight * centerFactor;

			const offsetX = (containerWidth - centerAreaWidth) / 2;
			const offsetY = (containerHeight - centerAreaHeight) / 2;

			const randomX =
				Math.random() * (centerAreaWidth - wrapperWidth) + offsetX;
			const randomY =
				Math.random() * (centerAreaHeight - wrapperHeight) + offsetY;
			const randomRotation = (Math.random() - 0.5) * 30; // -15 a +15 gradi

			// Posiziona con Anime.js
			animate(wrapper, {
				translateX: randomX,
				translateY: randomY,
				rotate: randomRotation,
				duration: 0,
				easing: "linear",
			});
		});
	}

	// Funzione per rendere le immagini draggable
	function makeDraggable() {
		const container = document.getElementById("gallery-container");
		if (!container) return;
		const draggableElements = container.querySelectorAll(".draggable");

		draggableElements.forEach(element => {
			createDraggable(element, {
				// Aggiunge effetto spring quando rilasci
				releaseEase: createSpring({
					stiffness: 120,
					damping: 8,
				}),
			});
		});
	}

	// Animazione di entrata delle immagini
	function animateImagesIn() {
		const imageWrappers = document.querySelectorAll(".image-wrapper");

		animate(imageWrappers, {
			scale: [0, 1],
			opacity: [0, 1],
			rotate: () => (Math.random() - 0.5) * 30,
			duration: 800,
			delay: stagger(100),
			easing: "easeOutElastic(1, 0.3)",
		});
	}

	// Effetto floating continuo
	function addFloatingEffect() {
		const imageWrappers = document.querySelectorAll(".image-wrapper");

		imageWrappers.forEach(wrapper => {
			const floatAnimation = () => {
				animate(wrapper, {
					translateY: `+=${(Math.random() - 0.5) * 40}`,
					translateX: `+=${(Math.random() - 0.5) * 20}`,
					rotate: `+=${(Math.random() - 0.5) * 10}`,
					duration: Math.random() * 3000 + 3000, // 3-6 secondi
					easing: "easeInOutSine",
					complete: floatAnimation, // Ripete l'animazione
				});
			};

			// Inizia con un ritardo casuale
			setTimeout(floatAnimation, Math.random() * 2000);
		});
	}

	// Inizializza quando il DOM Ã¨ caricato
	document.addEventListener("DOMContentLoaded", () => {
		randomizePositions();
		animateImagesIn();

		// Aspetta che l'animazione di entrata finisca prima di abilitare il drag
		setTimeout(() => {
			makeDraggable();
			addFloatingEffect();
		}, 1000);

		// Riposiziona al resize
		window.addEventListener("resize", () => {
			randomizePositions();
		});
	});
</script>
